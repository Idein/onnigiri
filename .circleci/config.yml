version: 2.1

references:
  onnigiri-ci-base-image: &onnigiri-ci-base-image "python:3.9-bullseye"

commands:
  install-python-dev-tools:
    steps:
      - run:
          name: Install python dev tools and dependencies
          command: |
            apt-get update
            apt-get install -y --no-install-recommends python3-pip
  poetry-install:
    steps:
      # See: https://circleci.com/docs/2.0/language-python/#cache-dependencies
      - restore_cache:
          key: &cache-key-poetry cache-poetry-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLECI_CACHE_VERSION }}-{{ checksum "poetry.lock" }}
      - install-python-dev-tools
      - run:
          name: install poetry && poetry install
          command: |
            curl -sSL https://install.python-poetry.org | python -
            echo 'export PATH=$HOME/.local/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
            poetry config virtualenvs.in-project true
            poetry install
      - save_cache:
          key: *cache-key-poetry
          paths:
            - ".venv"

jobs:
  lint:
    docker:
      - image: *onnigiri-ci-base-image
        auth: &docker-hub-auth
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - poetry-install
      - run:
          name: Lint
          command: |
            poetry run pysen run lint

  test-by-examples:
    docker:
      - image: *onnigiri-ci-base-image
        auth: &docker-hub-auth
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - poetry-install
      - run:
          name: check ultraface
          working_directory: examples
          command: |
            poetry run make -C ultraface check
      - run:
          name: check ssd
          working_directory: examples
          command: |
            poetry run make -C ssd check

  validate-version-with-tag:
    docker:
      - image: *onnigiri-ci-base-image
        auth: *docker-hub-auth
    steps:
      - checkout
      - poetry-install
      - run:
          name: Check if git tag name is appropriate for package version
          command: |
            TAG=$(echo ${CIRCLE_TAG} |sed -e 's/onnigiri-//')
            VERSION=$(poetry run python -c 'import pkg_resources; print(pkg_resources.get_distribution("onnigiri").version)')
            echo "Git tag: $TAG"
            echo "Package version: $VERSION"
            test "$VERSION" = "$TAG"

  deploy-package:
    docker:
      - image: *onnigiri-ci-base-image
        auth: *docker-hub-auth
    steps:
      - checkout
      - poetry-install
      - run:
          name: Publish wheel & sdist to PyPI
          command: |
            poetry publish --build --username "__token__" --password "$PYPI_API_TOKEN" --no-interaction

workflows:
  version: 2
  commit:
    jobs:
      - lint:
          context:
            - docker-hub-creds
      - test-by-examples:
          context:
            - docker-hub-creds

  release-onnigiri:
    jobs:
      - validate-version-with-tag:
          context:
            - docker-hub-creds
          filters: &release-filter
            tags:
              only: /^onnigiri-[0-9]+(\.[0-9]+){2}((a|b|rc)[0-9]+)?(.post[0-9])?(.dev[0-9])?$/
            branches:
              ignore: /.*/
      - deploy-package:
          context:
            - docker-hub-creds
          requires:
            - validate-version-with-tag
          filters: *release-filter
